
LIB61850_API MmsValue*
MmsValue_newDataAccessError(MmsDataAccessError accessError);

LIB61850_API MmsValue*
MmsValue_newInteger(int size);

LIB61850_API MmsValue*
MmsValue_newUnsigned(int size);

LIB61850_API MmsValue*
MmsValue_newBoolean(bool boolean);

/**
 * \brief Create a new MmsValue instance of type MMS_BITSTRING.
 *
 * \param bitSize the size of the bit string in bit
 *
 * \return new MmsValue instance of type MMS_BITSTRING
 */
LIB61850_API MmsValue*
MmsValue_newBitString(int bitSize);

LIB61850_API MmsValue*
MmsValue_newOctetString(int size, int maxSize);

LIB61850_API MmsValue*
MmsValue_newStructure(const MmsVariableSpecification* typeSpec);

LIB61850_API MmsValue*
MmsValue_createEmptyStructure(int size);

LIB61850_API MmsValue*
MmsValue_newDefaultValue(const MmsVariableSpecification* typeSpec);

LIB61850_API MmsValue*
MmsValue_newIntegerFromInt8(int8_t integer);

LIB61850_API MmsValue*
MmsValue_newIntegerFromInt16(int16_t integer);

LIB61850_API MmsValue*
MmsValue_newIntegerFromInt32(int32_t integer);

LIB61850_API MmsValue*
MmsValue_newIntegerFromInt64(int64_t integer);

LIB61850_API MmsValue*
MmsValue_newUnsignedFromUint32(uint32_t integer);

/**
 * \brief Create a new 32 bit wide float variable and initialize with value
 *
 * \param value the initial value
 *
 * \return new MmsValue instance of type MMS_FLOAT
 */
LIB61850_API MmsValue*
MmsValue_newFloat(float value);

/**
 * \brief Create a new 64 bit wide float variable and initialize with value
 *
 * \param value the initial value
 *
 * \return new MmsValue instance of type MMS_FLOAT
 */
LIB61850_API MmsValue*
MmsValue_newDouble(double value);

/**
 * \brief Create a (deep) copy of an MmsValue instance
 *
 * This operation will allocate dynamic memory. It is up to the caller to
 * free this memory by calling MmsValue_delete() later.
 *
 * \param self the MmsValue instance that will be cloned
 *
 * \return an MmsValue instance that is an exact copy of the given instance.
 */
LIB61850_API MmsValue*
MmsValue_clone(const MmsValue* self);

/**
 * \brief Create a (deep) copy of an MmsValue instance in a user provided buffer
 *
 * This operation copies the give MmsValue instance to a user provided buffer.
 *
 * \param self the MmsValue instance that will be cloned
 * \param destinationAddress the start address of the user provided buffer
 *
 * \return a pointer to the position in the buffer just after the last byte written.
 */
LIB61850_API uint8_t*
MmsValue_cloneToBuffer(const MmsValue* self, uint8_t* destinationAddress);

/**
 * \brief Determine the required amount of bytes by a clone.
 *
 * This function is intended to be used to determine the buffer size of a clone operation
 * (MmsValue_cloneToBuffer) in advance.
 *
 * \param self the MmsValue instance
 *
 * \return the number of bytes required by a clone
 */
LIB61850_API int
MmsValue_getSizeInMemory(const MmsValue* self);

/**
 * \brief Delete an MmsValue instance.
 *
 * This operation frees all dynamically allocated memory of the MmsValue instance.
 * If the instance is of type MMS_STRUCTURE or MMS_ARRAY all child elements will
 * be deleted too.
 *
 * \param self the MmsValue instance to be deleted.
 */
LIB61850_API void
MmsValue_delete(MmsValue* self);

/**
 * \brief Delete an MmsValue instance.
 *
 * This operation frees all dynamically allocated memory of the MmsValue instance.
 * If the instance is of type MMS_STRUCTURE or MMS_ARRAY all child elements will
 * be deleted too.
 *
 * NOTE: this functions only frees the instance if deleteValue field = 0!
 *
 *
 * \param self the MmsValue instance to be deleted.
 */
LIB61850_API void
MmsValue_deleteConditional(MmsValue* value);

/**
 * \brief Create a new MmsValue instance of type MMS_VISIBLE_STRING.
 *
 * This function will allocate as much memory as required to hold the string and sets the maximum size of
 * the string to this size.
 *
 * \param string a text string that should be the value of the new instance of NULL for an empty string.
 *
 * \return new MmsValue instance of type MMS_VISIBLE_STRING
 */
LIB61850_API MmsValue*
MmsValue_newVisibleString(const char* string);

/**
 * \brief Create a new MmsValue instance of type MMS_VISIBLE_STRING.
 *
 * This function will create a new empty MmsValue string object. The maximum size of the string is set
 * according to the size parameter. The function allocates as much memory as is required to hold a string
 * of the maximum size.
 *
 * \param size the new maximum size of the string.
 *
 * \return new MmsValue instance of type MMS_VISIBLE_STRING
 */
LIB61850_API MmsValue*
MmsValue_newVisibleStringWithSize(int size);

/**
 * \brief Create a new MmsValue instance of type MMS_STRING.
 *
 * This function will create a new empty MmsValue string object. The maximum size of the string is set
 * according to the size parameter. The function allocates as much memory as is required to hold a string
 * of the maximum size.
 *
 * \param size the new maximum size of the string.
 *
 * \return new MmsValue instance of type MMS_STRING
 */
LIB61850_API MmsValue*
MmsValue_newMmsStringWithSize(int size);

/**
 * \brief Create a new MmsValue instance of type MMS_BINARYTIME.
 *
 * If the timeOfDay parameter is set to true then the resulting
 * MMS_BINARYTIME object is only 4 octets long and includes only
 * the seconds since midnight. Otherwise the MMS_BINARYTIME
 *
 * \param timeOfDay if true only the TimeOfDay value is included.
 *
 * \return new MmsValue instance of type MMS_BINARYTIME
 */
LIB61850_API MmsValue*
MmsValue_newBinaryTime(bool timeOfDay);

/**
 * \brief Create a new MmsValue instance of type MMS_VISIBLE_STRING from the specified byte array
 *
 * \param byteArray the byte array containing the string data
 * \param size the size of the byte array
 *
 * \return new MmsValue instance of type MMS_VISIBLE_STRING
 */
LIB61850_API MmsValue*
MmsValue_newVisibleStringFromByteArray(const uint8_t* byteArray, int size);

/**
 * \brief Create a new MmsValue instance of type MMS_STRING from the specified byte array
 *
 * \param byteArray the byte array containing the string data
 * \param size the size of the byte array
 *
 * \return new MmsValue instance of type MMS_STRING
 */
LIB61850_API MmsValue*
MmsValue_newMmsStringFromByteArray(const uint8_t* byteArray, int size);

/**
 * \brief Create a new MmsValue instance of type MMS_STRING.
 *
 * \param string a text string that should be the value of the new instance of NULL for an empty string.
 *
 * \return new MmsValue instance of type MMS_STRING
 */
LIB61850_API MmsValue*
MmsValue_newMmsString(const char* string);

/**
 * \brief Set the value of MmsValue instance of type MMS_STRING
 *
 * \param string a text string that will be the new value of the instance
 */
LIB61850_API void
MmsValue_setMmsString(MmsValue* value, const char* string);

/**
 * \brief Create a new MmsValue instance of type MMS_UTCTIME.
 *
 * \param timeval time value as UNIX timestamp (seconds since epoch)
 *
 * \return new MmsValue instance of type MMS_UTCTIME
 */
LIB61850_API MmsValue*
MmsValue_newUtcTime(uint32_t timeval);

/**
 * \brief Create a new MmsValue instance of type MMS_UTCTIME.
 *
 * \param timeval time value as millisecond timestamp (milliseconds since epoch)
 *
 * \return new MmsValue instance of type MMS_UTCTIME
 */
LIB61850_API MmsValue*
MmsValue_newUtcTimeByMsTime(uint64_t timeval);


LIB61850_API void
MmsValue_setDeletable(MmsValue* self);

LIB61850_API void
MmsValue_setDeletableRecursive(MmsValue* value);

/**
 * \brief Check if the MmsValue instance has the deletable flag set.
 *
 * The deletable flag indicates if an libiec61850 API client should call the
 * MmsValue_delete() method or not if the MmsValue instance was passed to the
 * client by an API call or callback method.
 *
 * \param self the MmsValue instance
 *
 * \return 1 if deletable flag is set, otherwise 0
 */
LIB61850_API int
MmsValue_isDeletable(MmsValue* self);

/**
 * \brief Get the MmsType of an MmsValue instance
 *
 * \param self the MmsValue instance
 */
LIB61850_API MmsType
MmsValue_getType(const MmsValue* self);

/**
 * \brief Get a sub-element of a MMS_STRUCTURE value specified by a path name.
 *
 * \param self the MmsValue instance
 * \param varSpec - type specification if the MMS_STRUCTURE value
 * \param mmsPath - path (in MMS variable name syntax) to specify the sub element.
 *
 * \return the sub elements MmsValue instance or NULL if the element does not exist
 */
LIB61850_API MmsValue*
MmsValue_getSubElement(MmsValue* self, MmsVariableSpecification* varSpec, char* mmsPath);

/**
 * \brief return the value type as a human readable string
 *
 * \param self the MmsValue instance
 *
 * \return the value type as a human readable string
 */
LIB61850_API char*
MmsValue_getTypeString(MmsValue* self);

/**
 * \brief create a string representation of the MmsValue object in the provided buffer
 *
 * NOTE: This function is for debugging purposes only. It may not be aimed to be used
 * in embedded systems. It requires a full featured snprintf function.
 *
 * \param self the MmsValue instance
 * \param buffer the buffer where to copy the string representation
 * \param bufferSize the size of the provided buffer
 *
 * \return a pointer to the start of the buffer
 */
LIB61850_API const char*
MmsValue_printToBuffer(const MmsValue* self, char* buffer, int bufferSize);

/**
 * \brief create a new MmsValue instance from a BER encoded MMS Data element (deserialize)
 *
 * WARNING: API changed with version 1.0.3 (added endBufPos parameter)
 *
 * \param buffer the buffer to read from
 * \param bufPos the start position of the mms value data in the buffer
 * \param bufferLength the length of the buffer
 * \param endBufPos the position in the buffer after the read MMS data element (NULL if not required)
 *
 * \return the MmsValue instance created from the buffer
 */
LIB61850_API MmsValue*
MmsValue_decodeMmsData(uint8_t* buffer, int bufPos, int bufferLength, int* endBufPos);

/**
 * \brief Serialize the MmsValue instance as BER encoded MMS Data element
 *
 * \param self the MmsValue instance
 *
 * \param buffer the buffer to encode the MMS data element
 * \param bufPos the position in the buffer where to start encoding
 * \param encode encode to buffer (true) or calculate length only (false)
 *
 * \return the encoded length of the corresponding MMS data element
 */
LIB61850_API int
MmsValue_encodeMmsData(MmsValue* self, uint8_t* buffer, int bufPos, bool encode);

/**
 * \brief Get the maximum possible BER encoded size of the MMS data element
 *
 * \param self the MmsValue instance
 *
 * \return the maximum encoded size in bytes of the MMS data element
 */
LIB61850_API int
MmsValue_getMaxEncodedSize(MmsValue* self);

/**
 * \brief Calculate the maximum encoded size of a variable of this type
 *
 * \param self the MMS variable specification instance
 */
LIB61850_API int
MmsVariableSpecification_getMaxEncodedSize(MmsVariableSpecification* self);